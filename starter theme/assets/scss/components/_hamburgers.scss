@charset 'UTF-8';
// Settings
// ==================================================
$hamburger-padding-x: 5px !default;
$hamburger-padding-y: 15px !default;
$hamburger-layer-width: 33px !default;
$hamburger-layer-height: 2px !default;
$hamburger-layer-spacing: 9px !default;
$hamburger-layer-color: $primary-color !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: .7 !default;
$hamburger-hover-transition-duration: .15s !default;
$hamburger-hover-transition-timing-function: linear !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
  // 3dx,
  // 3dx-r,
  // 3dy,
  // 3dy-r,
  // 3dxy,
  // 3dxy-r,
  // arrow,
  // arrow-r,
  // arrowalt,
  // arrowalt-r,
  // arrowturn,
  // arrowturn-r,
  // boring,
  // collapse,
  // collapse-r,
  // elastic,
  // elastic-r,
  // emphatic,
  // emphatic-r,
  // minus,
  // slider,
  // slider-r,
  // spin,
  // spin-r,
  // spring,
  // spring-r,
  // stand,
  // stand-r,
  squeeze,
  // vortex,
  // vortex-r
) !default;

// Base Hamburger (We need this)
// ==================================================
.hamburger
{
    // Normalize (<button>)
    font: inherit;
    display: inline-block;
    overflow: visible;

    margin: 0;
    padding: $hamburger-padding-y $hamburger-padding-x;
    cursor: pointer;
    transition-timing-function: $hamburger-hover-transition-timing-function;
    transition-duration: $hamburger-hover-transition-duration;
    transition-property: opacity, filter;
    text-transform: none;

    color: inherit;
    border: 0;
    background-color: transparent;

    @include breakpoint(large)
    {
        display: none;
    }

    &:hover
    {
        // @if $hamburger-hover-use-filter == true {
        //   filter: $hamburger-hover-filter;
        // }
        // @else {
        //   opacity: $hamburger-hover-opacity;
        // }
    }
}

.hamburger-box
{
    position: relative;

    display: inline-block;

    width: $hamburger-layer-width;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
}

.hamburger-inner
{
    top: 50%;

    display: block;

    margin-top: $hamburger-layer-height / -2;

    &,
    &::before,
    &::after
    {
        position: absolute;
        width: $hamburger-layer-width;
        height: $hamburger-layer-height;
        transition-timing-function: ease;
        transition-duration: .15s;
        transition-property: transform;
        border-radius: $hamburger-layer-border-radius;
        background-color: $hamburger-layer-color;
        .mobile-menu-open &
        {
          background: $black;
        }
    }

    &::before,
    &::after {
      display: block;
      content: '';
    }
    &::before
    {
        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }
    &::after
    {
        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }
}

// Hamburger types
// ==================================================
// @import 'hamburger-types/3dx';
// @import 'hamburger-types/3dx-r';
// @import 'hamburger-types/3dy';
// @import 'hamburger-types/3dy-r';
// @import 'hamburger-types/3dxy';
// @import 'hamburger-types/3dxy-r';
// @import 'hamburger-types/arrow';
// @import 'hamburger-types/arrow-r';
// @import 'hamburger-types/arrowalt';
// @import 'hamburger-types/arrowalt-r';
// @import 'hamburger-types/arrowturn';
// @import 'hamburger-types/arrowturn-r';
// @import 'hamburger-types/boring';
// @import 'hamburger-types/collapse';
// @import 'hamburger-types/collapse-r';
// @import 'hamburger-types/elastic';
// @import 'hamburger-types/elastic-r';
// @import 'hamburger-types/emphatic';
// @import 'hamburger-types/emphatic-r';
// @import 'hamburger-types/minus';
// @import 'hamburger-types/slider';
// @import 'hamburger-types/slider-r';
// @import 'hamburger-types/spin';
// @import 'hamburger-types/spin-r';
// @import 'hamburger-types/spring';
// @import 'hamburger-types/spring-r';
// @import 'hamburger-types/stand';
// @import 'hamburger-types/stand-r';
@import 'hamburger-types/squeeze';
// @import 'hamburger-types/vortex';
// @import 'hamburger-types/vortex-r';

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }
